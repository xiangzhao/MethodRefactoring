/**
 * 
 */
package agent;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.Serializable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Time;
import java.util.Calendar;
import java.util.HashSet;
import java.util.Set;

import exceptions.CompilationFailureException;
import exceptions.UnitTestFailureException;
import util.FileUtil;
import laser.juliette.agent.StartHandler;
import laser.juliette.ams.AMSException;
import laser.juliette.ams.AgendaItem;
import laser.juliette.ams.IllegalTransition;
import laser.juliette.ams.UnknownParameter;

/**
 * @author xiang
 * 
 */
public class QueryModifierHandler extends StartHandler {

	private final BufferedReader br;
	private Connection conn;
	private static final String EXCEPTIONQUERY = "select value from compilationfdbk where vid=(select MAX(vid) from compilationfdbk)";
	private static final String UNITTESTSQUERY = "select value from unittestsfdbk where vid=(select MAX(vid) from unittestsfdbk)";

	// private static final String LOGFILE =
	// "/home/xiang/MethodRefactoringExample/QueryModifierExec.log";
	private static final String SRCFILE = "/home/xiang/MethodRefactoringExample/QueryModifierMethod/src/account/CheckingAccount.java";

	public QueryModifierHandler(AgendaItem associatedItem, BufferedReader br,
			Connection conn) {
		super(associatedItem);
		this.br = br;
		this.conn = conn;
	}

	@Override
	public void started() {
		// TODO Auto-generated method stub
		try {
			if (item.getStep().getName().equals("Detect QueryModifier Method")) {
				setParameter("sourcefilename", SRCFILE);
				String sourcefilecontent = FileUtil.readfromFile(SRCFILE);
				System.out.println("Current source file content: ");
				System.out.println(sourcefilecontent);
				setParameter("sourcefilecontent", sourcefilecontent);
				System.out.println("Please enter a querymodifier method:");
				String querymodifiermethodname = br.readLine();
				setParameter("querymodifiermethodname", querymodifiermethodname);
			}
			if (item.getStep().getName().equals("Declare Query Method")) {
				System.out
						.println("Please now declare a new query method in the source file");
				br.readLine();
				setSourcefilecontent();
			}
			if (item.getStep().getName().equals(
					"Modify Query to return same value as original one")) {
				System.out
						.println("Please now modify the query to return same value as original method");
				br.readLine();
				setSourcefilecontent();
			}
			if (item.getStep().getName().equals("Check declaration")) {
				System.out
						.println("Please make sure your query method declaration is correct");
				br.readLine();
				setSourcefilecontent();
			}
			if (item.getStep().getName().equals("Check method call")) {
				System.out
						.println("Please make sure you got it right calling the new method");
				br.readLine();
				setSourcefilecontent();
			}
			if (item.getStep().getName().equals("Check Query body")) {
				System.out
						.println("Please make sure your query returns the same value as original one");
				br.readLine();
				setSourcefilecontent();
			}
			if (item.getStep().getName().equals(
					"Make original Method return a call to the new query")) {
				System.out
						.println("Please make original method return a call to the new query");
				br.readLine();
				setSourcefilecontent();
			}
			if (item.getStep().getName().equals("Compile")) {
				System.out.println("Compiling new source file...");
				String cmd = "javac " + item.getParameter("sourcefilename");
				Process pr = Runtime.getRuntime().exec(cmd);
				String errormsg = FileUtil.printLines(cmd + " stderr:", pr
						.getErrorStream());
				pr.waitFor();
				if (pr.exitValue() != 0) {
					System.out.println("Compilation Failed");
					logCompilationfdbkToHistory(errormsg, "failure");
					terminate(new CompilationFailureException());
					return;
				} else {
					System.out.println("Compilation Success!");
					logCompilationfdbkToHistory("Compilation Success",
							"success");
				}
			}
			if (item.getStep().getName().equals("Run unit tests")) {
				System.out.println("Running unit tests...");
				String cmd = "/home/xiang/tests.sh";
				Process pr = Runtime.getRuntime().exec(cmd);
				String errormsg = FileUtil.printLines(cmd + " stdout:", pr
						.getInputStream());
				pr.waitFor();
				if (pr.exitValue() != 0) {
					System.out.println("Unit tests failed");
					logUnittestsfdbkToHistory(errormsg, "failure");
					terminate(new UnitTestFailureException());
					return;
				} else {
					System.out.println("Unit tests passed!");
					logUnittestsfdbkToHistory("Unit tests passed!", "success");
				}
			}
			if (item.getStep().isLeaf())
				item.complete();
		} catch (AMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IllegalTransition e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (UnknownParameter e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void setSourcefilecontent() throws AMSException, UnknownParameter {
		String sourcefilecontent = FileUtil.readfromFile(SRCFILE);
		setParameter("sourcefilecontent", sourcefilecontent);
	}

	// private void logToHistory(String historypiece) {
	// DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	// Calendar.getInstance().getTime();
	// }

	private void setParameter(String parameterName, Serializable object)
			throws AMSException, UnknownParameter {
		item.setParameter(parameterName, object);
		logToHistory(parameterName, object);
	}

	private void logToHistory(String parameterName, Serializable object) {
		// TODO Auto-generated method stub
		try {
			PreparedStatement statement = conn.prepareStatement("insert into "
					+ parameterName + " values (default,?,?,?,?)");
			statement.setString(1, (String) object);
			statement.setString(2, item.getStep().getName());
			statement.setString(3, "Jack");
			statement.setTime(4, new Time(Calendar.getInstance().getTime()
					.getTime()));
			statement.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (AMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void logCompilationfdbkToHistory(String compilationfdbk, String type) {
		// TODO Auto-generated method stub
		try {
			PreparedStatement statement = conn
					.prepareStatement("insert into compilationfdbk values (default,?,?,?,?,?)");
			statement.setString(1, compilationfdbk);
			statement.setString(2, item.getStep().getParent().getName());
			statement.setString(3, "Compiler");
			statement.setString(4, type);
			statement.setTime(5, new Time(Calendar.getInstance().getTime()
					.getTime()));
			statement.executeUpdate();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (AMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void logUnittestsfdbkToHistory(String unittestsfdbk, String type) {
		// TODO Auto-generated method stub
		try {
			PreparedStatement statement = conn
					.prepareStatement("insert into unittestsfdbk values (default,?,?,?,?,?)");
			statement.setString(1, unittestsfdbk);
			statement.setString(2, item.getStep().getParent().getName());
			statement.setString(3, "Bash");
			statement.setString(4, type);
			statement.setTime(5, new Time(Calendar.getInstance().getTime()
					.getTime()));
			statement.executeUpdate();
			// System.out.println("Update executed");
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (AMSException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	private void terminate(Serializable e) throws IOException, SQLException,
			InterruptedException {
		// TODO Auto-generated method stub

		System.out.println("Go to handling process...");
		System.out.println("Below is the exception message: ");
		Statement s = conn.createStatement();
		if (e instanceof CompilationFailureException) {
			s.executeQuery(EXCEPTIONQUERY);
		} else {
			s.executeQuery(UNITTESTSQUERY);
		}
		ResultSet rs = s.getResultSet();
		while (rs.next()) {
			String value = rs.getString("value");
			System.out.println(value);
		}
		System.out
				.println("Do you want to look at your recent change to the source file?(y/n)");
		String response = br.readLine();
		if (response.equals("y")) {
			// System.out.println("open");
			s
					.executeQuery("SELECT value FROM sourcefilecontent s order by ttime DESC LIMIT 0,3 ");
			ResultSet rts = s.getResultSet();
			rts.next();
			String file1 = rts.getString("value");
			rts.next();
			String file2 = rts.getString("value");
			rts.next();
			String file3 = rts.getString("value");
			FileUtil
					.rewritetofile(
							"/home/xiang/MethodRefactoringExample/CheckingAccount1.java",
							file1);
			FileUtil
					.rewritetofile(
							"/home/xiang/MethodRefactoringExample/CheckingAccount2.java",
							file2);
			FileUtil
					.rewritetofile(
							"/home/xiang/MethodRefactoringExample/CheckingAccount3.java",
							file3);
			String cmd = "meld /home/xiang/MethodRefactoringExample/CheckingAccount1.java /home/xiang/MethodRefactoringExample/CheckingAccount2.java /home/xiang/MethodRefactoringExample/CheckingAccount3.java";
			Process pr = Runtime.getRuntime().exec(cmd);
			pr.waitFor();
		}
		String query = null;
		System.out.println("Type in query as you want");
		while (!((query = br.readLine()).equals("end"))) {
			if (query.startsWith("where")) {
				query = "select step,ttime from sourcefilecontent order by ttime ASC";
			}
			s.executeQuery(query);
			rs = s.getResultSet();
			System.out.println("\n");
			while (rs.next()) {
				int i = 1;
				while (true) {
					try {
						System.out.print(rs.getString(i++) + "\t");
					} catch (SQLException err) {
						break;
					}
				}
				System.out.println();
			}
			System.out.println("\nAny other information you want to know?");
		}

		// System.out.println(FileUtil.readfromFile(LOGFILE));
		// System.out.println("The data gradereport is missing in datadictionary");
		Set<Serializable> exceptions = new HashSet<Serializable>();
		exceptions.add(e);
		try {
			item.terminate(exceptions);
		} catch (AMSException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalTransition e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
	}
}
